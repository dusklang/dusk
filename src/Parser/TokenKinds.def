//  Copyright Â© 2018 Zach Wolfe. All rights reserved.

#ifndef TOKEN
#define TOKEN(name)
#endif

#ifndef TOKEN_KEYWORD
#define TOKEN_KEYWORD(name, sourcerepr) TOKEN(kw_ ## name)
#endif

#ifndef TOKEN_SEPARATOR
#define TOKEN_SEPARATOR(name, character) TOKEN(sep_ ## name)
#endif

#ifndef TOKEN_OPERATOR
#define TOKEN_OPERATOR(name, string) TOKEN(op_ ## name)
#endif

TOKEN(identifier)
TOKEN(integer_literal)
TOKEN(decimal_literal)
TOKEN(string_literal)
TOKEN(char_literal)

TOKEN(eof)
TOKEN(whitespace)
TOKEN(newline)
TOKEN(comment_single_line)
TOKEN(comment_multiple_line)

TOKEN_KEYWORD(def, def)
TOKEN_KEYWORD(var, var)
TOKEN_KEYWORD(extern, extern)
TOKEN_KEYWORD(return, return)
TOKEN_KEYWORD(true, true)
TOKEN_KEYWORD(false, false)
TOKEN_KEYWORD(if, if)
TOKEN_KEYWORD(else, else)
TOKEN_KEYWORD(while, while)

TOKEN_SEPARATOR(colon, ':')
TOKEN_SEPARATOR(equal, '=')
TOKEN_SEPARATOR(comma, ',')
TOKEN_SEPARATOR(left_paren, '(')
TOKEN_SEPARATOR(right_paren, ')')
TOKEN_SEPARATOR(left_curly, '{')
TOKEN_SEPARATOR(right_curly, '}')

TOKEN_OPERATOR(add, "+")
TOKEN_OPERATOR(subtract, "-")
TOKEN_OPERATOR(asterisk, "*")
TOKEN_OPERATOR(divide, "/")
TOKEN_OPERATOR(modulo, "%")
TOKEN_OPERATOR(equal, "==")
TOKEN_OPERATOR(not_equal, "!=")
TOKEN_OPERATOR(less_than_or_equal, "<=")
TOKEN_OPERATOR(less_than, "<")
TOKEN_OPERATOR(greater_than_or_equal, ">=")
TOKEN_OPERATOR(greater_than, ">")
TOKEN_OPERATOR(b_or, "||")
TOKEN_OPERATOR(b_and, "&&")
TOKEN_OPERATOR(b_not, "!")

#undef TOKEN
#undef TOKEN_KEYWORD
#undef TOKEN_SEPARATOR
#undef TOKEN_OPERATOR
