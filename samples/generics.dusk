fn memset<|T|>(dest: T *mut, src: T, count: usize) {
    cur := dest
    end :: (dest as usize + size_of(T) * count) as T *mut
    while cur as usize != end as usize {
        *dest = src
        cur = (cur as usize + size_of(T)) as T *mut
    }
}

fn main() {
    buffer :: malloc(24) as u8 *mut
    foo(*buffer)
    memset(buffer, 34, 24)
    // Top-level generic function calls are not yet parsed, so assign to a temporary
    _ :: memset<|u8|>(buffer, 34, 24)
}

fn foo<|T|>(arg: T) {}