Array<|T|> :: struct {
    data: T *mut
    count: usize
    capacity: usize
}

INITIAL_NONZERO_CAPACITY: usize : 4

Alias :: Array<|i32|>

fn make_array<|T|>(): Array<|T|> {
    Array {
        data: 0 as usize as T *mut
        count: 0
        capacity: 0
    }
}

fn add<|T|>(self: Array<|T|> *mut, element: T) {
    if self.count == self.capacity {
        ensure_capacity(self, self.count + 1)
    }
    *((self.data as usize + size_of(T) * self.count) as T *mut) = element
    self.count += 1
}

fn get<|T|>(self: Array<|T|>*, index: usize): T {
    core.assert(index < self.count)
    *((self.data as usize + size_of(T) * index) as T*)
}

fn set<|T|>(self: Array<|T|> *mut, index: usize, value: T) {
    core.assert(index < self.count)
    *((self.data as usize + size_of(T) * index) as T *mut) = value
}

fn ensure_capacity<|T|>(self: Array<|T|> *mut, new_capacity: usize) {
    // TODO: the more natural way (for me) to write this function would be to use an early return,
    // but that leads to a "no entry found for key" panic related to ret groups not being assigned
    // TIR units early enough.
    if new_capacity <= self.capacity {
        // this line intentionally left blank.
    } else if self.capacity == 0 as usize {
        self.data = malloc(size_of(T) * INITIAL_NONZERO_CAPACITY) as T *mut
        self.capacity = INITIAL_NONZERO_CAPACITY
    } else {
        while self.capacity < new_capacity {
            self.capacity *= 2
        }
        new_data :: malloc(size_of(T) * self.capacity) as T *mut
        memcpy(new_data, self.data, self.count)
        free(self.data as void *mut)
        self.data = new_data
    }
}

// TODO: I tried adding this to core.dusk and got a parser error??
fn memcpy<|T|>(dest: T *mut, src: T*, count: usize) {
    cur_dest := dest
    end_dest :: (dest as usize + size_of(T) * count) as T *mut

    cur_src := src
    while cur_dest as usize != end_dest as usize {
        *cur_dest = *cur_src
        cur_dest = (cur_dest as usize + size_of(T)) as T *mut
        cur_src = (cur_src as usize + size_of(T)) as T*
    }
}

// The builtin print_int doesn't work right now
fn print_int(val: i32) {
    print(val as u8 + "0")
    print("\n")
}

fn main() {
    // Demonstration that type aliases to generic types work:
    numbers := Alias {
        data: 0 as usize as i32 *mut
        count: 0
        capacity: 0
    }

    // And here are the actual generic calls:
    numbers := make_array<|i32|>()    

    for i in 0..10 {
        add(&mut numbers, i)
    }

    for i in 0..numbers.count {
        print_int(get(&numbers, i))
    }
}