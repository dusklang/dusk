fn main() {
    // Prints 68
    print_int(build_mod().THE_CONSTANT)

    user_space_print("Hello, world #1! (from user_space_print with putchar)\n")

    procedural_mod.printf("Hello, world #%d! (from %s)\n", 2, "printf");

    procedural_mod.NSLog(&make_nsstring("Hello, there! Here is an argument: %@"), &make_nsstring("hahahahahahahahahahahahaha"))
}

procedural_mod :: build_mod()
fn user_space_print(val: i8*) {
    val := val
    while *val != 0 {
        procedural_mod.putchar(*val as i32);
        val = (val as usize + 1) as i8*
    }
}

NSString :: struct {
    isa: void*
    flags: u64
    data: void*
    len: u64
}

fn make_nsstring(value: i8*): NSString {
    NSString {
        isa: procedural_mod.__NSCFConstantString
        flags: 1992
        data: value as void*
        len: procedural_mod.strlen(value) as u64
    }
}


fn build_mod(): module {
    b :: compiler.ModuleBuilder.new()

    b.add_usize_constant("THE_CONSTANT", 68)

    pc := compiler.ExternFunctionBuilder.new("putchar", i32, "libSystem.dylib")
    pc.add_param("char", i32)
    b.add_extern_function(pc)

    pf := compiler.ExternFunctionBuilder.new("printf", i32, "libSystem.dylib")
    pf.add_param("format", i8*)
    pf.add_variadic_param()
    b.add_extern_function(pf)

    stl := compiler.ExternFunctionBuilder.new("strlen", i32, "libSystem.dylib")
    stl.add_param("str", i8*)
    b.add_extern_function(stl)

    b.add_objc_class_ref("__NSCFConstantString", "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation")

    nsl := compiler.ExternFunctionBuilder.new("NSLog", void, "/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation")
    nsl.add_param("format", NSString*)
    nsl.add_variadic_param()
    b.add_extern_function(nsl)

    b.build()
}
