/*
fn print_num(num: i32) {
    num := num
    if num < 0 {
        print("-")
        num = -num
    }
    if num > 10 {
        print_num(num / 10)
    }
    print((num % 10) as u8 + "0")
}

FIZZ_BUZZ_NUM_ITERATIONS :: 100

fn fizz_buzz {
    i := 1
    while i <= FIZZ_BUZZ_NUM_ITERATIONS {
        if i % 3 == 0 || i % 5 == 0 {
            if i % 3 == 0 {
                print("Fizz")
            }
            if i % 5 == 0 {
                print("Buzz")
            }
        } else {
            print_num(i)
        }
        print("\n")
        i = i + 1
    }
}

fn main {
    foo := remainder_three_numbers(1, 2, 3)
    foo = foo + 2

    fizz_buzz

    h := "h" as u8 as u8 as i8 as i8 as u8 as i8 as isize as u64
    i: u64 = 24
    j := h as usize as u8*
    k := 5 as u8
    l := k as u16
    m := l as i32
    n := m as u64
    o := n as i16

    // Allocate a single 8-bit integer on the heap
    num :: malloc(1) as u8 *mut
    (*num) = 12
    free(num as void *mut)

    fn float_const {
        blah: f32 = 5.2
    }
}*/

fn assert(condition: bool) {
    if !condition { panic("assertion failed") }
}

fn remainder_three_numbers(a: i32, b: i32, c: i32): i32 {
    a % b % c
}

fn foo: i32 {
    12
}

fn main() {
    assert(5 > foo)
    if !(5 < foo) {
        print("Hello, world!\n")
    } else {
        print("Go away, world! :(\n")
    }
}