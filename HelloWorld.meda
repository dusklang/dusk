fn assert(condition: bool) {
    if !condition { panic("assertion failed") }
}

fn print_num(num: i32) {
    num := num
    if num < 0 {
        print("-")
        num = -num
    }
    if num >= 10 {
        print_num(num / 10)
    }
    print((num % 10) as u8 + "0")
}

FIZZ_BUZZ_ITERATIONS := 120

fn fizz_buzz {
    i := 1
    while i <= FIZZ_BUZZ_ITERATIONS {
        if i % 3 == 0 || i % 5 == 0 {
            if i % 3 == 0 {
                print("Fizz")
            }
            if i % 5 == 0 {
                print("Buzz")
            }
        } else {
            print_num(i)
        }
        print("\n")
        i = i + 1
    }
}

fn fib(n: i32): i32 {
    if n == 0 {
        0
    } else if n == 1 {
        1
    } else {
        fib(n - 1) + fib(n - 2)
    }
}

fn strlen(str: u8*): usize {
    str := str
    len: usize = 0
    while *((str as usize + len) as u8*) != 0 {
        len = len + 1
    }
    len
}

fn concat(a: u8*, b: u8*): u8* {
    len :: strlen(a) + strlen(b)
    buf := malloc(len + 1) as u8 *mut
    ret_val :: buf
    a := a
    while *a != 0 {
        (*buf) = *a
        a = (a as usize + 1) as u8*
        buf = (buf as usize + 1) as u8 *mut
    }
    b := b
    while *b != 0 {
        (*buf) = *b
        b = (b as usize + 1) as u8*
        buf = (buf as usize + 1) as u8 *mut
    }
    (*buf) = 0
    ret_val
}

fn print_and_return_fib(str: u8*, n: i32): i32 {
    print(str)
    fib(n)
}

fn print_and_return_concatenated_string(a: u8*, b: u8*): u8* {
    val :: concat(a, b)
    print(val)
    val
}

FIB_N :: print_and_return_fib("printing at compile time while compiling constant!\n", 7)
FIB :: print_and_return_fib("printing at compile time!\n", FIB_N)
generated_string :: concat(concat("Hello, ", "world!"), " (from compile-time)\n")

fn too_hype_for_types(a: i32, b: i32, c: i32) = a * b + c

fn take_a_type(T: type) {}

fn main {
    //fizz_buzz
    //FIZZ_BUZZ_ITERATIONS = 200
    //fizz_buzz

    print("fib(")
    print_num(FIB_N)
    print(") = ")
    print_num(FIB)
    print("\n")

    print(generated_string)

    h := (((((((("h" as u8) as u8) as i8) as i8) as u8) as i8) as isize) as u64)
    i: u64 = 24
    //j := h as usize as u8*
    k := 5 as u8
    l := k as u16
    m := l as i32
    n := m as u64
    o := n as i16

    // "Unimplemented intrinsic I32"
    take_a_type(i32)

    // Allocate a single 8-bit integer on the heap
    //num :: malloc(1) as u8 *mut
    //(*num) = 12
    //free(num as void *mut)

    fn float_const {
        blah: f32 = 5.2
    }
}