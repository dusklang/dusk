/*std :: mod {
    fn assert(condition: bool) {
        if !condition { panic("assertion failed") }
    }

    fn print_num(num: i32) {
        num := num
        if num < 0 {
            print("-")
            num = -num
        }
        if num >= 10 {
            print_num(num / 10)
        }
        print((num % 10) as u8 + "0")
    }

    str :: mod {
        fn len(str: u8*): usize {
            str := str
            darba := str
            derpa := darba
            len: usize = 0
            while *((str as usize + len) as u8*) != 0 {
                len = len + 1
            }
            len
        }

        fn concat(a: u8*, b: u8*): u8* {
            len :: len(a) + len(b)
            buf := malloc(len + 1) as u8 *mut
            ret_val :: buf
            a := a
            while *a != 0 {
                *buf = *a
                a = (a as usize + 1) as u8*
                buf = (buf as usize + 1) as u8 *mut
            }
            b := b
            while *b != 0 {
                *buf = *b
                b = (b as usize + 1) as u8*
                buf = (buf as usize + 1) as u8 *mut
            }
            *buf = 0
            ret_val
        }
    }
}

fn fib(n: i32): i32 {
    if n == 0 {
        0
    } else if n == 1 {
        1
    } else {
        fib(n - 1) + fib(n - 2)
    }
}

FIZZ_BUZZ_ITERATIONS := 120

fn fizz_buzz() {
    i := 1
    while i <= FIZZ_BUZZ_ITERATIONS {
        if i % 3 == 0 || i % 5 == 0 {
            if i % 3 == 0 {
                print("Fizz")
            }
            if i % 5 == 0 {
                print("Buzz")
            }
        } else {
            std.print_num(i)
        }
        print("\n")
        i = i + 1
    }
}

fn print_and_return_fib(str: u8*, n: i32): i32 {
    print(str)
    fib(n)
}

fn print_and_return_concatenated_string(a: u8*, b: u8*): u8* {
    val :: std.str.concat(a, b)
    print(val)
    val
}

FIB_N :: print_and_return_fib("printing at compile time while compiling constant!\n", 7)
FIB :: print_and_return_fib("printing at compile time!\n", FIB_N)
generated_string :: std.str.concat(std.str.concat("Hello, ", "world!"), " (from compile-time)\n")

fn too_hype_for_types(a: i32, b: i32, c: i32) = a * b + c

fn take_a_type(T: type) {
    print_type(T)
    print("\n")
    U := T
    U = bool
    print_type(U)
    print("\n")
    U = type
    print_type(U)
    print("\n")
}

fn compute_a_module(switch: u32): module {
    if switch == 0 {
        mod {
            fn print_the_switch() {
                print("The switch is 0!\n")
            }
        }
    } else if switch == 1 {
        mod {
            fn print_the_switch() {
                print("The switch is 1!\n")
            }
        }
    } else if switch == 2 {
        mod {
            fn print_the_switch() {
                print("The switch is 2!\n")
            }
        }
    } else if switch == 3 {
        mod {
            fn print_the_switch() {
                print("The switch is 3!\n")
            }
        }
    } else {
        mod {
            fn print_the_switch() {
                print("I don't know what the switch is!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            }
        }
    }
}

mawd :: compute_a_module(4)

fn main() {
    print("the number is ")
    std.print_num(compute_a_number() as i32)
    print(", and its type is ")
    print_type(os_dependent_type())
    print("\n")

    fizz_buzz()
    FIZZ_BUZZ_ITERATIONS = 200
    fizz_buzz()

    print("fib(")
    std.print_num(FIB_N)
    print(") = ")
    std.print_num(FIB)
    print("\n")

    print(generated_string)

    h := "h" as u8 as u8 as i8 as i8 as u8 as i8 as isize as u64

    i: u64 = 24

    j := h as usize as u8*
    
    k := 5 as u8
    l := k as u16
    m := l as i32
    n := m as u64
    o := n as i16

    p :: 45 | 12

    take_a_type(i8 *mut *mut)

    // Allocate a single 8-bit integer on the heap
    num :: malloc(1) as u8 *mut
    *num = 12
    free(num as void *mut)

    //mawd.print_the_switch()

    fs.read_file("GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHHHHHHHHHHHHHHH.txt")

    fn float_const() {
        blah: f32 = 5.2
    }
}

fn read_file_common(path: u8*, platform: u8*) {
    print("Reading path ")
    print(path)
    print(" on ")
    print(platform)
    print("!\n")
}

fn os_computer(): module {
    gah :: OS_WINDOWS == 2
    
    mod {
            fn read_file(path: u8*) { read_file_common(path, "Windows") }
        }
    /*if os == OS_WINDOWS {
        mod {
            fn read_file(path: u8*) { read_file_common(path, "Windows") }
        }
    } else if os == OS_MAC {
        mod {
            fn read_file(path: u8*) { read_file_common(path, "macOS") }
        }
    } else if os == OS_LINUX {
        mod {
            fn read_file(path: u8*) { read_file_common(path, "Linux") }
        }
    } else {
        mod {
            fn read_file(path: u8*) { read_file_common(path, "an unknown OS") }
        }
    }*/
}

fs :: os_computer()


/*
fs :: if os == OS_WINDOWS {
    mod {
        fn read_file(path: u8*) { read_file_common(path, "Windows") }
    }
} else if os == OS_MAC {
    mod {
        fn read_file(path: u8*) { read_file_common(path, "macOS") }
    }
} else if os == OS_LINUX {
    mod {
        fn read_file(path: u8*) { read_file_common(path, "Linux") }
    }
} else {
    mod {
        fn read_file(path: u8*) { read_file_common(path, "an unknown OS") }
    }
}*/

fn compute_something(i: i32): i32 {
    i
}

OS_WINDOWS: u8: 0
OS_MAC:     u8: 1
OS_LINUX:   u8: 2
os :: OS_WINDOWS

fn os_dependent_type(): type {
    if os == OS_WINDOWS {
        i32
    } else {
        u64
    }
}

fn compute_a_number(): os_dependent_type() {
    sixteen_bit_number: u16 = 256

    sixteen_bit_number as os_dependent_type()
}*/


fn os_computer(): module {
    gah :: OS_WINDOWS == 1
    mod {
        fn read_file(path: u8*) { print("readin' a file!\n") }
    }
}

OS_WINDOWS: u8 : 0

fn main() {
    os_computer().read_file("asdfasd.txt")
}