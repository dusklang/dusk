D :: struct {
    e: f32
    f: f64
}

Foo :: struct {
    a: i32
    b: u64
    c: u8*
    d: D
    g: u8
}

std :: import("std.meda")

fn print_foo(foo: Foo) {
    print("foo = Foo { a: ")
    std.print_num(foo.a)
    print(", b: ")
    std.print_num(foo.b as i32)
    print(", c: \"")
    print(foo.c)
    print("\", d: { e: ")
    std.print_num(foo.d.e as i32)
    print(", f: ")
    std.print_num(foo.d.f as i32)
    print(" } }\n")
}

fahah := Foo {
    a: 24
    b: 782
    c: "This is a constant struct!\n"
    d: D {
        e: 13.5
        f: 12.2
    }
    g: 32
}

fn take_float(a: f32) {}

fn main() {
    internal_struct :: struct {
        foo: Foo
        bar: struct { a: bool, b: u32 }
        baz: i32
    }

    take_float(3.2)

    var := "hello"
    var = "bye"

    foo := Foo {
        a: 24
        b: 782
        c: "Hello, world!"
        d: D {
            e: 13.5
            f: 12.2
        }
        g: 32
    }

    foo.d.e = 12.2

    fah :: &mut (fahah)
    (*fah).c = "ASHDFJALKSJDHASKLDHJ\n"
    print((*fah).c)


    foo.c = "Hello!"

    print_foo(foo)

    print(fahah.c)
    print("\n")

    print_foo(fahah)

    print_type(internal_struct)
}