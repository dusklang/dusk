MyEnum :: enum {
    a, b, c
}

MyStruct :: struct {
    a: u64
    b: MyEnum
}

fn main() {
    my_enum :: MyEnum.b
    print_enum(my_enum)
    print_enum(MyEnum.c)

    val :: MyStruct {
        a: 43
        b: MyEnum.a
    }
    print_enum_the_right_way(val.b)

    // Expected output:
    // enum is b!
    // enum is c!
    // enum is a!



    create_adt()

    catch_all()
}

fn print_enum(e: MyEnum) {
    if e == MyEnum.b {
        print("enum is b!\n")
    } else if e != MyEnum.c {
        print("enum is a!\n")
    } else {
        print("enum is c!\n")
    }
}

fn print_enum_the_right_way(e: MyEnum) {
    switch e {
        .a: print("enum is a!\n"),
        .b: {
            msg :: "enum is b!\n"
            print(msg)
        }
        .c: print("enum is c!\n"),
    }
}

fn more_tests(e: MyEnum): u8* {
    switch e {
        .a: print("enum is a!\n"),
        .b: {
            msg :: "enum is b!\n"
            print(msg)
        }
        .c: print("enum is c!\n"),
    }

    print("this is the end, yo\n")

    hello := switch e {
        .a: "Hello, a!",
        .b: "Hello, b!",
        .c: "Hello, c!",
    }
    print(hello)
    print("\n")

    switch e {
        .a: switch e { .a: "Hello, a!", .b: "Hello, b!", .c: "Hello, c!" },
        .b: "Hello, b!",
        .c: "Hello, c!",
    }
}

MyAdt :: enum {
    a(i32)
    b(u32)
    c {
        a: u32
        b: u8*
    }
}

fn create_adt() {
    /*
    adt :: MyAdt.a(12)
    switch adt {
        .a: {}
        .b: {}
        .c: {}
    }*/
}

fn catch_all() {
    e :: MyEnum.b
    switch e {
        .a: print("a case\n"),
        //.b: print("b case\n"),
        .c: print("c case\n"),
        value: {
            copy :: value
            print("catch-all case\n")
        },
        //_: print("second catch-all case\n")
    }
}
/*
fn foo(adt: MyAdt) {
    switch adt {
        .a(val): print_int(val),
        .b(u64_val): print_u64(u64_val),
        .c { a: a, b: b }: {
            print_u32(a)
            print(b)
        }
    }
}*/